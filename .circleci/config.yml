version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.1
  kubernetes: circleci/kubernetes@1.2.0

jobs:
  lint:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Install python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            make lint

  build-and-push:
    docker:
      - image: cimg/python:3.11.4
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker container
          command: |
            docker build -t $DOCKER_PATH:${CIRCLE_WORKFLOW_ID:0:7} .
            docker image tag $DOCKER_PATH:${CIRCLE_WORKFLOW_ID:0:7} $DOCKER_PATH
            docker images
      - run:
          name: Upload Docker to Dockerhub
          command: |
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push $DOCKER_PATH:${CIRCLE_WORKFLOW_ID:0:7}

  network-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Create EKS network
          command: |
            if aws cloudformation describe-stacks --stack-name "capstone-network" 2>&1 | grep -q "does not exist"; then
              echo "EKS network stack does not exist. Deploying..."
              aws cloudformation deploy \
                --template-file template/network.yml \
                --tags project=capstone \
                --stack-name "capstone-network" \
                --region $AWS_DEFAULT_REGION
            else
              echo "EKS network stack exists."
            fi

  cluster-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Create EKS Cluster
          command: |
            if aws cloudformation describe-stacks --stack-name "apstone-cluster" 2>&1 | grep -q "does not exist"; then
              echo "EKS Cluster stack does not exist. Deploying..."
              aws cloudformation deploy \
              --template-file template/infrastructure.yml \
              --tags project=capstone \
              --stack-name "capstone-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameter-overrides ClusterName=capstone-cluster
            else
              echo "EKS Cluster stack exists."
            fi

  deploy:
    docker:
      - image: cimg/python:3.11.4
    parameters:
      cluster-name:
        type: string
        default: "capstone-cluster"
      aws-region:
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: ./template/kubernetes_deployment.yml
          resource-name: deployment/capstone_pj
          get-rollout-status: true
          show-kubectl-command: true
      - kubernetes/update-container-image:
          container-image-updates: capstone_pj=$DOCKER_PATH:${CIRCLE_WORKFLOW_ID:0:7}
          resource-name: deployment/capstone_pj
          show-kubectl-command: true
          get-rollout-status: true
      - run:
          name: Test cluster
          command: |
            kubectl get nodes
            kubectl get deployment
            kubectl get pod -o wide
            kubectl get services
      - run:
          name: Cleaning up
          command: docker system prune

workflows:
  deployment:
    jobs:
      - lint

      - build-and-push:
          filters:
            branches:
              only:
                - master
          requires:
            - "lint"

      - network-infrastructure:
          requires:
            - "build-and-push"

      - cluster-infrastructure:
          requires:
            - "network-infrastructure"

      - deploy:
          cluster-name: capstone-cluster
          aws-region: $AWS_DEFAULT_REGION
          requires:
            - "cluster-infrastructure"
